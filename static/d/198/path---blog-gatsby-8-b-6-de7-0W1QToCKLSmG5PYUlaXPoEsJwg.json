{"data":{"markdownRemark":{"html":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>f</mi><mi>o</mi><mi>o</mi><mi>b</mi><mi>a</mi><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">\\sum_{i=1}^n foo bar</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.6513970000000002em;\"></span><span class=\"strut bottom\" style=\"height:2.929066em;vertical-align:-1.277669em;\"></span><span class=\"base\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"></span></span></span></span><span class=\"mord rule\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathit\">o</span><span class=\"mord mathit\">o</span><span class=\"mord mathit\">b</span><span class=\"mord mathit\">a</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span>\n<p>There are a lot of static site generators these days. Jekyll seemed to be the most popular back when I was in college, but other systems have since popped up: Hugo is a big one, and Pelican also has a somewhat mature ecosystem. Each generator is always tightly coupled to a particular language: Jekyll uses Ruby, Hugo uses Go, Pelican uses Python.</p>\n<p>I've wanted to switch from Jekyll for a while now, mostly because I was never fluent in Ruby and that made writing plugins a huge challenge. I recently saw on HackerNews that <a href=\"https://www.gatsbyjs.org/blog/2018-09-17-gatsby-v2/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gatsby released v2.0.0</a>, and I'd never heard of it. Turns out it uses GraphQL and React (two things I use pretty heavily at work) and makes it super easy to get started. I was able to follow the tutorial and get a site up and running in a matter of minutes.</p>\n<p>The cool thing about Gatsby is that the entire Webpack pipeline is included out of the box, so you get nice things like hot-module-reloading while developing, and everything gets minified for the production build.</p>\n<h3>Flow Typing</h3>\n<p>My team at work uses Flow for static typing JavaScript applications, and I've gotten used to all the benefits that provides: catching errors before they go to production, jump to definition, and remembering what bits of code do what. We also use Relay for GraphQL Javascript apps, which has a compiler that generates Flow types as a part of parsing GraphQL queries.</p>\n<p>However, turns out that Gatsby is missing this particular feature, and that means all GraphQL queries are untyped by default. Not good!</p>\n<p>Luckily, <a href=\"https://github.com/apollographql/apollo-cli\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Apollo's CLI</a> allows you to generate Flow definitions from any set of Javascript files, regardless if you're using their ecosystem or not. I chained a couple of commands in my <code class=\"language-text\">package.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> -f src/codegen/graphql/* <span class=\"token operator\">&amp;&amp;</span> \\\n    apollo schema:download --endpoint http://localhost:8000/___graphql gatsby-schema.json <span class=\"token operator\">&amp;&amp;</span> \\\n    apollo codegen:generate --tagName graphql  --target flow --useFlowExactObjects --useFlowReadOnlyTypes --queries <span class=\"token string\">'./src/**/*.js'</span> --schema ./gatsby-schema.json --outputFlat src/codegen/graphql</code></pre></div>\n<p>This queries the local GraphiQL instance, dumps the schema to a file, and uses that schema to generate Flow types for all JavaScript files in my <code class=\"language-text\">src</code> directory. I can then import those types from the components that need them:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> type <span class=\"token punctuation\">{</span> PostQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../codegen/graphql/PostQuery'</span><span class=\"token punctuation\">;</span>\n\ntype Props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>\n  data<span class=\"token punctuation\">:</span> PostQuery<span class=\"token punctuation\">,</span>\n<span class=\"token operator\">|</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Post</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span><span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I've never actually been excited about a static page generator until now, and I've found it super easy to get things up and running.</p>","frontmatter":{"date":"September 23, 2018","title":"Gatsby","path":"/blog/gatsby"}}},"pageContext":{}}