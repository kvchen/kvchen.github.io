{"data":{"markdownRemark":{"html":"<p>There are a lot of static site generators these days. Jekyll seemed to be the most popular back when I was in college, but other systems have since popped up: Hugo is a big one, and Pelican has also gained some popularity. Each generator is always tightly coupled to a particular language: Jekyll uses Ruby, Hugo uses Go, and Pelican uses Python.</p>\n<p>I've wanted to switch from Jekyll for a while now, mostly because I was never fluent in Ruby and that made writing plugins a huge challenge. I recently saw on HackerNews that <a href=\"https://www.gatsbyjs.org/blog/2018-09-17-gatsby-v2/\">Gatsby released v2.0.0</a>, and I'd never heard of it. Turns out it uses GraphQL and React and makes it super easy to get started. I was able to follow the tutorial and get a site up and running in a matter of minutes.</p>\n<h3>Flow Typing</h3>\n<p>My team at work uses Flow for static typing Javascript applications, and I've gotten used to all the benefits that provides: catching errors before they go to production, jump to definition, and a whole bunch of other stuff. We also use Relay for GraphQL Javascript apps, which has a compiler that generates Flow types as a part of parsing GraphQL queries.</p>\n<p>However, turns out that Gatsby is missing this particular feature. For that, I added a custom script</p>\n<pre><code class=\"language-bash\">rm -f src/codegen/graphql/*\napollo schema:download --endpoint http://localhost:8000/___graphql gatsby-schema.json\napollo codegen:generate --tagName=graphql  --target=flow --useFlowExactObjects --useFlowReadOnlyTypes --queries='./src/**/*.js' --schema=./gatsby-schema.json --outputFlat src/codegen/graphql\n</code></pre>","frontmatter":{"date":"September 23, 2018","title":"Gatsby","path":"/blog/gatsby"}}},"pageContext":{}}