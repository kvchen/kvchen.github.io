{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.regexp.to-string.js","webpack:///./src/components/postSummary.js","webpack:///./src/pages/blog.js"],"names":["redefine","anObject","fails","flags","RegExpPrototype","RegExp","prototype","nativeToString","NOT_GENERIC","call","source","INCORRECT_NAME","name","R","this","p","String","rf","undefined","unsafe","PostSummary","post","frontMatter","frontmatter","key","id","className","to","path","title","datetime","date","excerpt","IndexPage","pageContext","group","index","pageCount","previousUrl","toString","nextUrl","map","node","filter","Boolean","role"],"mappings":"2FACA,IAAIA,EAAW,EAAQ,QACnBC,EAAW,EAAQ,QACnBC,EAAQ,EAAQ,QAChBC,EAAQ,EAAQ,QAGhBC,EAAkBC,OAAOC,UACzBC,EAAiBH,EAAyB,SAE1CI,EAAcN,GAAM,WAAc,MAA2D,QAApDK,EAAeE,KAAK,CAAEC,OAAQ,IAAKP,MAAO,SAEnFQ,EANY,YAMKJ,EAAeK,MAIhCJ,GAAeG,IACjBX,EAASK,OAAOC,UAXF,YAWwB,WACpC,IAAIO,EAAIZ,EAASa,MACbC,EAAIC,OAAOH,EAAEH,QACbO,EAAKJ,EAAEV,MAEX,MAAO,IAAMY,EAAI,IADTC,YAAcE,IAAPD,GAAoBJ,aAAaR,UAAY,UAAWD,GAAmBD,EAAMM,KAAKI,GAAKI,KAEzG,CAAEE,QAAQ,K,2KCZA,SAASC,EAAT,GAAuC,IAAhBC,EAAe,EAAfA,KAC9BC,EAAcD,aAAH,EAAGA,EAAME,YAE1B,OACE,uBAASC,IAAKH,aAAF,EAAEA,EAAMI,IAClB,sBAAQC,UAAU,eAChB,kBAAIA,UAAU,cACZ,YAAC,IAAD,CAAMC,GAAIL,aAAF,EAAEA,EAAaM,MAAON,aAA9B,EAA8BA,EAAaO,QAE7C,sBACE,oBAAMC,SAAUR,aAAF,EAAEA,EAAaS,MAAOT,aAApC,EAAoCA,EAAaS,QAIrD,uBAASL,UAAU,gBACjB,qBAAIL,aAAJ,EAAIA,EAAMW,WCPH,SAASC,EAAT,GAA4C,IAAvBC,EAAsB,EAAtBA,YAC1BC,EAA4BD,EAA5BC,MAAOC,EAAqBF,EAArBE,MAAOC,EAAcH,EAAdG,UAChBC,EAAcF,EAAQ,GAAM,EAAI,IAAMA,EAAQ,GAAGG,WACjDC,GAAWJ,EAAQ,GAAGG,WAE5B,OACE,YAAC,IAAD,MACIJ,UAAS,IACRM,KAAI,SAAAN,GAAK,OAAIA,aAAJ,EAAIA,EAAOO,QACpBC,OAAOC,SACPH,KAAI,SAAApB,GAAI,OACP,YAACD,EAAD,CAAaC,KAAMA,OAEvB,mBAAKK,UAAU,aAAamB,KAAK,cACpB,IAAVT,EACC,YAAC,IAAD,CAAMV,UAAU,cAAcC,GAAIa,GAAlC,iBAGE,KACJ,oBAAMd,UAAU,eAAhB,QACQU,EADR,OACmBC,GAElBD,IAAUC,EAAY,EACrB,YAAC,IAAD,CAAMX,UAAU,cAAcC,GAAIW,GAAlC,iBAGE","file":"component---src-pages-blog-js-0b40d527b7563a778c24.js","sourcesContent":["'use strict';\nvar redefine = require('../internals/redefine');\nvar anObject = require('../internals/an-object');\nvar fails = require('../internals/fails');\nvar flags = require('../internals/regexp-flags');\n\nvar TO_STRING = 'toString';\nvar RegExpPrototype = RegExp.prototype;\nvar nativeToString = RegExpPrototype[TO_STRING];\n\nvar NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });\n// FF44- RegExp#toString has a wrong name\nvar INCORRECT_NAME = nativeToString.name != TO_STRING;\n\n// `RegExp.prototype.toString` method\n// https://tc39.es/ecma262/#sec-regexp.prototype.tostring\nif (NOT_GENERIC || INCORRECT_NAME) {\n  redefine(RegExp.prototype, TO_STRING, function toString() {\n    var R = anObject(this);\n    var p = String(R.source);\n    var rf = R.flags;\n    var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? flags.call(R) : rf);\n    return '/' + p + '/' + f;\n  }, { unsafe: true });\n}\n","// @flow\n\nimport * as React from 'react';\n\nimport { Link } from 'gatsby';\nimport type { PostGenerationQuery_allMarkdownRemark_edges_node } from '../codegen/graphql/PostGenerationQuery';\n\ntype Props = {|\n  post: PostGenerationQuery_allMarkdownRemark_edges_node,\n|};\n\nexport default function PostSummary({ post }: Props) {\n  const frontMatter = post?.frontmatter;\n\n  return (\n    <article key={post?.id}>\n      <header className=\"post-header\">\n        <h2 className=\"post-title\">\n          <Link to={frontMatter?.path}>{frontMatter?.title}</Link>\n        </h2>\n        <h3>\n          <time datetime={frontMatter?.date}>{frontMatter?.date}</time>\n        </h3>\n      </header>\n\n      <section className=\"post-excerpt\">\n        <p>{post?.excerpt}</p>\n      </section>\n    </article>\n  );\n}\n","// @flow\n\nimport * as React from 'react';\n\nimport { Link, graphql } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport type { PostGenerationQuery_allMarkdownRemark } from '../codegen/graphql/PostGenerationQuery';\nimport PostSummary from '../components/postSummary';\n\ntype Props = {\n  data: mixed,\n  pageContext: {\n    group: $PropertyType<PostGenerationQuery_allMarkdownRemark, 'edges'>,\n    index: number,\n    pageCount: number,\n  },\n};\n\nexport default function IndexPage({ pageContext }: Props) {\n  const { group, index, pageCount } = pageContext;\n  const previousUrl = index - 1 === 1 ? '' : (index - 1).toString();\n  const nextUrl = (index + 1).toString();\n\n  return (\n    <Layout>\n      {(group ?? [])\n        .map(group => group?.node)\n        .filter(Boolean)\n        .map(post => (\n          <PostSummary post={post} />\n        ))}\n      <nav className=\"pagination\" role=\"navigation\">\n        {index === 0 ? (\n          <Link className=\"newer-posts\" to={nextUrl}>\n            &larr; Newer Posts\n          </Link>\n        ) : null}\n        <span className=\"page-number\">\n          Page {index} of {pageCount}\n        </span>\n        {index === pageCount - 1 ? (\n          <Link className=\"older-posts\" to={previousUrl}>\n            Older Posts &rarr;\n          </Link>\n        ) : null}\n      </nav>\n    </Layout>\n  );\n}\n\n// NOTE: This is just for Flow-typing and not actually executed.\n// Update this if the query in `gatsby-node.js` is changed.\nexport const postGenerationQuery = graphql`\n  query PostGenerationQuery {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 300)\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            path\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}